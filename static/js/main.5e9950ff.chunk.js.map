{"version":3,"sources":["serviceWorker.js","elements/Habilidad.js","elements/BoxAtributo.js","elements/PanelPrincipal.js","index.js"],"names":["Boolean","window","location","hostname","match","Habilidad","props","useState","nivel","setNivel","handleNivel","val","temp","max_nivel","PH","editPH","afecta_vida","editVida","vida","onClick","className","title","descripcion","children","BoxAtributo","setnivel","maxNivel","PA","editPA","nombre","habilidades","map","habilidad","key","max_level","PanelPrincipal","puntosAtributos","setpuntosAtributos","puntosHabilidades","setpuntosHabilidades","vidaPJ","setvidaPJ","dataJson","atributos","atributo","id","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e9950ff.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react'\n\nexport default function Habilidad(props) {\n    const [nivel, setNivel] = useState(0)\n\n    function handleNivel(val){\n        let temp = nivel + val;\n        if(temp >= 0 && temp <= props.max_nivel){\n           if(props.PH >= 0 && val > 0){\n            setNivel(temp)\n            props.editPH(props.PH-1)\n            if(props.afecta_vida)\n                props.editVida(props.vida+val)\n           }\n           else if(props.PH <= 40 && val < 0){\n            setNivel(temp)\n            props.editPH(props.PH+1)\n            if(props.afecta_vida)\n                props.editVida(props.vida+val)\n           }\n            \n        }\n    }\n\n    return (\n        <div>\n            <button onClick={() => handleNivel(-1)}>-</button><button onClick={() => handleNivel(+1)}>+</button> <div className=\"habilidad\" title={props.descripcion}>{props.children} LVL <b>{nivel}</b></div>\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport Habilidad from './Habilidad'\n\nexport default function BoxAtributo(props) {\n    \n    const [nivel, setnivel] = useState(0)\n\n    let handleNivel = (val) => {\n        let temp = nivel+val;\n        if(temp >= 0 && temp <= props.maxNivel)\n            if(val > 0 && props.PA >= 0){\n                props.editPA(props.PA-1);\n                setnivel(temp);\n                if(props.afecta_vida)\n                    props.editVida(props.vida+1)\n            }\n            else if(val < 0 && props.PA <= 20){\n                props.editPA(props.PA+1)\n                setnivel(temp)\n                if(props.afecta_vida)\n                    props.editVida(props.vida-1)\n            }\n                \n    }\n\n    return (\n        <div className=\"boxAtributo\">\n            <center><h3 title={props.descripcion}>{props.nombre} <span>{nivel}</span></h3></center>\n            <hr />\n            {props.habilidades.map((habilidad) => (\n                <Habilidad \n                    key={habilidad.nombre} \n                    max_nivel={habilidad.max_level}\n                    descripcion={habilidad.descripcion} \n                    vida={props.vida} \n                    editVida={props.editVida} \n                    afecta_vida={habilidad.afecta_vida}\n                    PH={props.PH}\n                    editPH={props.editPH}\n                    >\n                        {habilidad.nombre}\n                </Habilidad>\n            ))}\n            <hr />\n            <center><button onClick={() => handleNivel(1)}>Subir nivel</button></center>\n            <center><button onClick={() => handleNivel(-1)}>Bajar nivel</button></center>\n            \n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport dataJson from '../data/atributos.json';\nimport BoxAtributo from './BoxAtributo';\n\nexport default function PanelPrincipal() {\n\n    const [puntosAtributos, setpuntosAtributos] = useState(20)\n    const [puntosHabilidades, setpuntosHabilidades] = useState(40)\n    const [vidaPJ, setvidaPJ] = useState(0)\n    \n    return (\n        <div className=\"panelPrincipal\">\n            <p>Vida: <b>{vidaPJ*5}</b>  |  Puntos atributos disponible: <b>{puntosAtributos}</b>  |  Puntos habilidad disponible: <b>{puntosHabilidades}</b></p>\n            {\n                dataJson.atributos.map((atributo) => (\n            \n                    <BoxAtributo \n                        key={atributo.id}\n                        nombre={atributo.nombre}\n                        descripcion={atributo.descripcion} \n                        maxNivel={atributo.max_level} \n                        editPA={setpuntosAtributos}\n                        editPH={(val) => setpuntosHabilidades(val)}\n                        PA={puntosAtributos}\n                        PH={puntosHabilidades}\n                        afecta_vida={atributo.afecta_vida}\n                        vida={vidaPJ}\n                        editVida={setvidaPJ}\n                        habilidades={atributo.habilidades}\n                        \n                    />\n                \n                    ))\n            }\n\n\n        </div>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport PanelPrincipal from './elements/PanelPrincipal';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PanelPrincipal />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}