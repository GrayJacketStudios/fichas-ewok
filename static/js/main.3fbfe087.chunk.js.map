{"version":3,"sources":["serviceWorker.js","elements/Habilidad.js","elements/BoxAtributo.js","elements/PanelPrincipal.js","index.js"],"names":["Boolean","window","location","hostname","match","Habilidad","props","useState","nivel","setNivel","handleNivel","val","temp","max_nivel","PH","editPH","afecta_vida","editVida","vida","onClick","className","title","descripcion","children","BoxAtributo","setnivel","maxNivel","PA","editPA","nombre","habilidades","map","habilidad","key","max_level","PanelPrincipal","puntosAtributos","setpuntosAtributos","puntosHabilidades","setpuntosHabilidades","vidaPJ","setvidaPJ","dataJson","atributos","atributo","id","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fbfe087.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Habilidad(props) {\r\n    const [nivel, setNivel] = useState(0)\r\n\r\n    function handleNivel(val){\r\n        let temp = nivel + val;\r\n        if(temp >= 0 && temp <= props.max_nivel){\r\n           if(props.PH > 0 && val > 0){\r\n            setNivel(temp)\r\n            props.editPH(props.PH-1)\r\n            if(props.afecta_vida)\r\n                props.editVida(props.vida+val)\r\n           }\r\n           else if(props.PH <= 40 && val < 0){\r\n            setNivel(temp)\r\n            props.editPH(props.PH+1)\r\n            if(props.afecta_vida)\r\n                props.editVida(props.vida+val)\r\n           }\r\n            \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={() => handleNivel(-1)}>-</button><button onClick={() => handleNivel(+1)}>+</button> <div className=\"habilidad\" title={props.descripcion}>{props.children} LVL <b>{nivel}</b></div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport Habilidad from './Habilidad'\r\n\r\nexport default function BoxAtributo(props) {\r\n    \r\n    const [nivel, setnivel] = useState(0)\r\n\r\n    let handleNivel = (val) => {\r\n        let temp = nivel+val;\r\n        if(temp >= 0 && temp <= props.maxNivel)\r\n            if(val > 0 && props.PA > 0){\r\n                props.editPA(props.PA-1);\r\n                setnivel(temp);\r\n                if(props.afecta_vida)\r\n                    props.editVida(props.vida+1)\r\n            }\r\n            else if(val < 0 && props.PA <= 24){\r\n                props.editPA(props.PA+1)\r\n                setnivel(temp)\r\n                if(props.afecta_vida)\r\n                    props.editVida(props.vida-1)\r\n            }\r\n                \r\n    }\r\n\r\n    return (\r\n        <div className=\"boxAtributo\">\r\n            <center><h3 title={props.descripcion}>{props.nombre} <span>{nivel}</span></h3></center>\r\n            <hr />\r\n            {props.habilidades.map((habilidad) => (\r\n                <Habilidad \r\n                    key={habilidad.nombre} \r\n                    max_nivel={habilidad.max_level}\r\n                    descripcion={habilidad.descripcion} \r\n                    vida={props.vida} \r\n                    editVida={props.editVida} \r\n                    afecta_vida={habilidad.afecta_vida}\r\n                    PH={props.PH}\r\n                    editPH={props.editPH}\r\n                    >\r\n                        {habilidad.nombre}\r\n                </Habilidad>\r\n            ))}\r\n            <hr />\r\n            <center><button onClick={() => handleNivel(1)}>Subir nivel</button></center>\r\n            <center><button onClick={() => handleNivel(-1)}>Bajar nivel</button></center>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport dataJson from '../data/atributos.json';\r\nimport BoxAtributo from './BoxAtributo';\r\n\r\nexport default function PanelPrincipal() {\r\n\r\n    const [puntosAtributos, setpuntosAtributos] = useState(24)\r\n    const [puntosHabilidades, setpuntosHabilidades] = useState(40)\r\n    const [vidaPJ, setvidaPJ] = useState(0)\r\n    \r\n    return (\r\n        <div className=\"panelPrincipal\">\r\n            <p>Vida: <b>{vidaPJ*5}</b>  |  Puntos atributos disponible: <b>{puntosAtributos}</b>  |  Puntos habilidad disponible: <b>{puntosHabilidades}</b></p>\r\n            {\r\n                dataJson.atributos.map((atributo) => (\r\n            \r\n                    <BoxAtributo \r\n                        key={atributo.id}\r\n                        nombre={atributo.nombre}\r\n                        descripcion={atributo.descripcion} \r\n                        maxNivel={atributo.max_level} \r\n                        editPA={setpuntosAtributos}\r\n                        editPH={(val) => setpuntosHabilidades(val)}\r\n                        PA={puntosAtributos}\r\n                        PH={puntosHabilidades}\r\n                        afecta_vida={atributo.afecta_vida}\r\n                        vida={vidaPJ}\r\n                        editVida={setvidaPJ}\r\n                        habilidades={atributo.habilidades}\r\n                        \r\n                    />\r\n                \r\n                    ))\r\n            }\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport PanelPrincipal from './elements/PanelPrincipal';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <PanelPrincipal />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}